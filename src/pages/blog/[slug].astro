---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import CallToAction from '../../components/CallToAction.astro';
import Breadcrumbs from '../../components/Breadcrumbs.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: post,
  }));
}

const post = Astro.props;
const { Content } = await post.render();

// Get related posts (excluding current post)
const allPosts = await getCollection('blog');
const relatedPosts = allPosts
  .filter(p => p.slug !== post.slug)
  .sort(() => Math.random() - 0.5)
  .slice(0, 3);

function formatDate(date: Date) {
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

const canonicalURL = `https://trueviewsewer.com/blog/${post.slug}`;
const breadcrumbItems = [
  { label: 'Home', href: 'https://trueviewsewer.com/' },
  { label: 'Blog', href: '/blog' },
  { label: post.data.title }
];
---

<Layout 
  title={post.data.title}
  description={post.data.description}
  canonicalURL={canonicalURL}
  image={post.data.heroImage}
>
  <!-- JSON-LD Schema for Blog Post -->
  <script type="application/ld+json" set:html={JSON.stringify({
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": post.data.title,
    "description": post.data.description,
    "image": post.data.heroImage,
    "author": {
      "@type": "Organization",
      "name": post.data.author
    },
    "publisher": {
      "@type": "Organization",
      "name": "TrueView Sewer",
      "url": "https://trueviewsewer.com"
    },
    "datePublished": post.data.pubDate.toISOString(),
    "dateModified": post.data.updatedDate?.toISOString() || post.data.pubDate.toISOString(),
    "mainEntityOfPage": {
      "@type": "WebPage",
      "@id": canonicalURL
    }
  })} />

  <Header />
  
  <main class="py-20">
    <div class="container mx-auto px-4 max-w-4xl">
      <!-- Breadcrumbs -->
      <Breadcrumbs items={breadcrumbItems} />
      
      <!-- Hero Image -->
      {post.data.heroImage && (
        <div class="aspect-video mb-8 rounded-lg overflow-hidden">
          <img 
            src={post.data.heroImage} 
            alt={post.data.title}
            class="w-full h-full object-cover"
          />
        </div>
      )}
      
      <!-- Article Header -->
      <header class="mb-8">
        <h1 class="text-4xl md:text-5xl font-bold text-neutral-dark mb-4 leading-tight">
          {post.data.title}
        </h1>
        
        <div class="flex items-center text-muted-foreground mb-6">
          <span>By {post.data.author}</span>
          <span class="mx-2">•</span>
          <time datetime={post.data.pubDate.toISOString()}>
            {formatDate(post.data.pubDate)}
          </time>
          <span class="mx-2">•</span>
          <span>{post.data.readTime}</span>
        </div>
        
        <p class="text-xl text-slate-foreground leading-relaxed">
          {post.data.description}
        </p>
      </header>
      
      <!-- Article Content -->
      <article class="bg-white border border-gray-200 rounded-lg p-8 mb-12 max-w-4xl mx-auto">
        <div class="blog-content">
          <Content />
        </div>
      </article>
      
      <!-- Related Posts -->
      {relatedPosts.length > 0 && (
        <section class="mb-12">
          <h2 class="text-2xl font-bold text-neutral-dark mb-8">Related Articles</h2>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            {relatedPosts.map((relatedPost) => (
              <article class="bg-white border border-gray-200 rounded-lg overflow-hidden hover:shadow-lg transition-shadow">
                {relatedPost.data.heroImage && (
                  <div class="aspect-video overflow-hidden">
                    <img 
                      src={relatedPost.data.heroImage} 
                      alt={relatedPost.data.title}
                      class="w-full h-full object-cover"
                    />
                  </div>
                )}
                
                <div class="p-4">
                  <h3 class="font-semibold text-neutral-dark mb-2 leading-tight">
                    <a href={`/blog/${relatedPost.slug}`} class="hover:text-blue-accent transition-colors">
                      {relatedPost.data.title}
                    </a>
                  </h3>
                  
                  <div class="text-sm text-muted-foreground mb-2">
                    {formatDate(relatedPost.data.pubDate)} • {relatedPost.data.readTime}
                  </div>
                  
                  <a 
                    href={`/blog/${relatedPost.slug}`}
                    class="inline-block border border-blue-accent text-blue-accent px-3 py-1 rounded text-sm hover:bg-blue-accent hover:text-white transition-colors"
                  >
                    Read More
                  </a>
                </div>
              </article>
            ))}
          </div>
        </section>
      )}
      
      <!-- Call to Action -->
      <CallToAction />
    </div>
  </main>
  
  <Footer />
</Layout>

<style>
  .prose h2 {
    @apply text-2xl font-bold mt-8 mb-4;
  }
  
  .prose h3 {
    @apply text-xl font-bold mt-6 mb-3;
  }
  
  .prose ul {
    @apply list-disc pl-6 mb-4;
  }
  
  .prose li {
    @apply mb-2;
  }
  
  .prose p {
    @apply mb-4;
  }
  
  .prose strong {
    @apply font-semibold;
  }
</style>